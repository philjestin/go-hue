package main

import (
	"fmt"
	"log"
	"net"

	"github.com/thatisuday/commando"
)

func main() {
	// Configure commando
	commando.
		SetExecutableName("gohue").
		SetVersion("v1.0.0").
		SetDescription("This CLI tool helps you configure and manage Philips Hue Lights")

	// Configure the root-command
	// $ gohue <category> --verbose | -V, --version| -V, --help | -h
	commando.
		Register(nil).
		AddArgument("commands", "commands that the cli tool provide.", "").
		AddFlag("verbose,V", "display log information ", commando.Bool, nil).
		SetAction(func(args map[string]commando.ArgValue, flags map[string]commando.FlagValue) {
			// Print Arguments
			for k, v := range args {
				fmt.Printf("arg -> %v: %v(%T)\n", k, v.Value, v.Value)
			}

			// print flags
			for k, v := range flags {
				fmt.Printf("flag -> %v: %v(%T)\n", k, v.Value, v.Value)
			}
		})

	commando.
		Register("config-get").
		SetShortDescription("get your current go-hue configuration").
		SetDescription("this command is used to get your current go-hue configuration").
		SetAction(func(args map[string]commando.ArgValue, flags map[string]commando.FlagValue) {
			printConfig()
		})

	commando.
		Register("config-set").
		SetShortDescription("configure the IP address and user token for authentication with the Philips Hue Bridge.").
		SetDescription("this command is used to configure the IP address and the user token for authentication with the Philips Hue Bridge.").
		AddFlag("ip,i", "The IP Address of the Philips Hue bridge on your local network", commando.String, nil).
		AddFlag("user-token,u", "The User Token generated by your Philips Hue bridge for authentication", commando.String, nil).
		SetAction(func(args map[string]commando.ArgValue, flags map[string]commando.FlagValue) {
			// Set the config file.
			// Print Arguments
			for k, v := range args {
				fmt.Printf("arg -> %v: %v(%T)\n", k, v.Value, v.Value)
			}

			// print flags
			for k, v := range flags {
				fmt.Printf("flag -> %v: %v(%T)\n", k, v.Value, v.Value)
			}

			addr := flags["ip"].Value
			userToken := flags["user-token"].Value
			var hueIP net.IP

			if str, ok := addr.(string); ok {
				/* act on str */
				hueIP = net.ParseIP(str)
			} else {
				/* not string */
				log.Fatalln("Invalid IP Address")
			}

			if userTokenStr, userTokenOk := userToken.(string); userTokenOk {
				config(hueIP, userTokenStr)
			} else {
				log.Fatalln("Invalid user token, user token provided was not a string")
			}
		})

	// Configure the list command
	// $ gohue list
	commando.
		Register("list").
		SetShortDescription("displays detailed information about all lights connected to your Philips Hue Bridge.").
		SetDescription("this command displays more information about the state of all of the lights connected to your Philips Hue Bridge.").
		AddArgument("group,g", "A Philips Hue Light Group that has been configured", "office-desk-lights.").
		AddFlag("light,l", "A specific light you want the state of", commando.Int, 0).
		SetAction(func(args map[string]commando.ArgValue, flags map[string]commando.FlagValue) {
			// Print Arguments
			for k, v := range args {
				fmt.Printf("arg -> %v: %v(%T)\n", k, v.Value, v.Value)
			}

			// print flags
			for k, v := range flags {
				fmt.Printf("flag -> %v: %v(%T)\n", k, v.Value, v.Value)
			}
			configData := readFromConfig()
			getLightState(configData.HueIP, configData.HueUser)
		})

	// parse command-line arguments from the STDIN
	commando.Parse(nil)
}
